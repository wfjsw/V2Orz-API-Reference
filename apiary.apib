FORMAT: 1A
HOST: http://server.v2.orz.chat/

# V2Orz-Server

V2Orz Server is a Database & Content backend for Project V2Orz  
Author: [Jabasukuriputo Wang](https://github.com/wfjsw) 


## Server Info [/server.manifest]

### Get Server Info [GET]

This function returns the basic informations of this server. 
This is a static file and cache should always be enabled to save resources.

+ Response 200 (application/json)

        {
            "hostname": "clara.server.v2.orz.chat",
            "name": "clara",
            "admin": "unknown"        
        }


# Group Content Management

## Nodes [/node/{scope}]

### Get List of All Nodes [GET]

Note that a few of data is hidden in 'all'.

+ Parameters
    + scope (string, `all`) ... Use `all` here for all nodes

+ Response 200 (application/json)

        [
            {
                "ID": "tech",
                "Fullname": "Technology",
                "Avatar": "<sha256 of avatar in UGC>",
                "upstream": ["<parent node>"]
            },
            {
                "ID": "gaming",
                "Fullname": "Gaming",
                "Avatar": "<sha256 of avatar in UGC>",
                "upstream": ["<parent node>"]
            }
        ]


### Get the Info of a Node [GET]

+ Parameters
    + scope (string, `tech`) ... Node ID here to query.

+ Response 200 (application/json)

        {
            "ID": "tech",
            "Fullname": "Technology",
            "Description": "blah blah blah",
            "Avatar": "<sha256 of avatar in UGC>",
            "Sidebar": "<sha256 of sidebar data in UGC>",
            "upstream": ["<parent node>"]
        }

+ Response 404 (application/json)

        {
            "Error": 404
        }


## Topics [/topic/{sort_factor}/{pointer}]

### Get topics under a node [GET]

+ Parameters
    + sort_factor (string, `id || owner || tag || node`) ... Search type.
    + pointer (string) ... what to search

+ Response 200 (application/json)

        [
            {
                "UUID": "<UUID>",
                "Node": "<Node that this topic under>",
                "Title": "<title>",
                "Tags": ["<A user defined tag>"],
                "Owner": "<Owner_Address>",
                "timestamp_c": <client_timestamp>,
                "timestamp_s": <server_timestamp>,
                "Content": "<UGC_Hash>",
                "signature": "<BTC_Sign>"
            }
        ]

### Post a new topic [POST]

+ Parameters
    + sort_factor (string, `node`) ... This must be 'node' in POST.
    + pointer (string) ... the node topic unders.

+ Request (application/json)

        {
            "Title": "<title>",
            "Tags": ["<A user defined tag>"],
            "Owner": "<Owner_Address>",
            "timestamp": <client_timestamp>,
            "Content": "<Content_in_base64>",
            "signature": "<BTC_Sign>"
        }

+ Response 200 (application/json)

        {
            "topic": "<topic UUID>",
            "content: "<UGC hash>",
            "timestamp": <server_timestamp>
        }

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }